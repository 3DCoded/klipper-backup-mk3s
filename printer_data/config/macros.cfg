[include sample-macros.cfg]

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}
[idle_timeout] 
timeout: 18000
gcode:
    {% if printer.pause_resume.is_paused %}
        M118 Bypassed Timeout
        M117 Bypassed Timeout
    {% else %}
        M118 Timeout Reached
        M117 Timeout Reached
        TURN_OFF_HEATERS
        M84
    {% endif %}
  
# [gcode_macro PRINT_START1]
# gcode:
#   SET_PRINT_STATS_INFO TOTAL_LAYER={params.LAYER_COUNT}
#   G28 X Y ; home xy
#   BED_MESH_PROFILE LOAD=default; load bed mesh
#   G90 ; use absolute coordinates
#   M83 ; extruder relative mode
#   M104 S{params.FIRST_LAYER_TEMP} ; set extruder temp
#   M140 S{params.FIRST_LAYER_BED_TEMP} ; set bed temp
#   TEMPERATURE_WAIT SENSOR=extruder MINIMUM={(params.FIRST_LAYER_TEMP|int)-2} MAXIMUM={(params.FIRST_LAYER_TEMP|int)+2}
#   TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={(params.FIRST_LAYER_BED_TEMP|int)-3} MAXIMUM={(params.FIRST_LAYER_BED_TEMP|int)+3}
#   LED_PRINTING

# [gcode_macro PRINT_START2]
# gcode:
#   G28 Z

#   BED_MESH_CALIBRATE PROFILE=default METHOD=bicubic

#   G1 Z32 F30000
#   G1 X252 Y-3 F30000
#   G1 Z29 F30000

#   ; start chameleon
#   PRESS_CHAMELEON
#   G4 P500
#   PRESS_CHAMELEON
#   G4 P500
#   PULSE_CHAMELEON PULSES=7
#   PULSE_CHAMELEON PULSES={params.INITIAL_EXTRUDER}
#   LOAD_CHAMELEON
#   PRESS_CHAMELEON
#   SET_CHAMELEON_STATE P={params.INITIAL_EXTRUDER} L=-1
#   G1 E65 F1000 ; E100
#   G1 X150 F3000
#   G1 Z0.2 F3000
#   # G1 Z0.2 F720
#   G1 Y-3 F1000 ; go outside print area
#   G92 E0
#   G1 X50 E38 F900
#   G1 X5 F1200
#   # G1 Y-2
#   # G92 E0
#   # G1 X240 E35 F900
#   # G1 Z2 F720
#   # G1 X240 E9 F1000 ; intro line
#   # G1 X200 E12.5 F1000 ; intro line

#   G92 E0
#   M221 S95

[gcode_macro PRINT_START]
gcode:
  {% set filament_notes = params.FILAMENT_NOTES|default("")|string %}
  SET_PRINT_STATS_INFO TOTAL_LAYER={params.LAYER_COUNT}
  # M104 S{(params.FIRST_LAYER_TEMP|int)-50}

  {% if "material_toxic" in filament_notes %}
  M118 Toxic material, enabling air filter
  FILTER_ON
  {% endif %}

  M104 S{(params.FIRST_LAYER_TEMP|int)-50}
  M140 S{params.FIRST_LAYER_BED_TEMP}

  {% if( params.FIRST_LAYER_BED_TEMP|int) > 0 %}
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={(params.FIRST_LAYER_BED_TEMP|int)-3} MAXIMUM={(params.FIRST_LAYER_BED_TEMP|int)+3}
  {% endif %}
  
  G28 W
  BED_MESH_CALIBRATE PROFILE=default METHOD=bicubic
  # BED_MESH_PROFILE LOAD="default"

  SMART_PARK
  M104 S{params.FIRST_LAYER_TEMP}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={(params.FIRST_LAYER_TEMP|int)-2} MAXIMUM={(params.FIRST_LAYER_TEMP|int)+2}
  
  # RESET_CHAMELEON
  # G4 P1000
  # PULSE_CHAMELEON PULSES=7
  # G4 P1000
  # PULSE_CHAMELEON PULSES={(params.INITIAL_EXTRUDER|int)+1}
  # G4 P1000
  # LOAD_CHAMELEON
  # M83
  # G92 E0
  # G1 E65 F600
  # SET_CHAMELEON_STATE P={params.INITIAL_EXTRUDER} L=-1

  LINE_PURGE
  
  

[gcode_macro PRINT_END]
gcode:
  {% if printer.toolhead.position.z + 10 <= printer.toolhead.axis_maximum.z %}
  G91
  G1 Z10
  G90
  {% else %}
  G1 Z{printer.toolhead.axis_maximum.z}
  {% endif %}
  G1 X0 Y210 F3600 ; park
  G4 ; wait
  M221 S100 ; reset flow

  LED_IDLE
  # G1 E-80 F1000

  ; end chameleon
  # PULSE_CHAMELEON PULSES=6
  # UNLOAD_CHAMELEON TOOL=-1

  M104 S0 ; turn off temperature
  M140 S0 ; turn off heatbed
  M107 ; turn off fan
  FILTER_DELAY

[gcode_macro BRUSH_NOZZLE]
gcode:
  SAVE_GCODE_STATE NAME=brush
  {% set start_z = printer.toolhead.position.z %}
  {% if start_z < 37 %}
  G90
  G1 Z32 F3000
  G1 X252 Y-3 F30000
  G1 Z28.5 F3000
  G1 X150 Z26.5 F3000
  G1 Z{start_z}
  {% else %}
  G91
  G1 Z5 F3000
  G90
  G1 X252 Y-3 F30000
  G1 Z28.5 F3000
  G1 X150 Z26.5 F3000
  G1 Z{start_z}
  {% endif %}
  RESTORE_GCODE_STATE NAME=brush

[gcode_macro TMC_SILENT]
gcode:
  SET_VELOCITY_LIMIT ACCEL=4000
  SET_VELOCITY_LIMIT VELOCITY=300
  AUTOTUNE_TMC STEPPER=stepper_x TUNING_GOAL=silent
  AUTOTUNE_TMC STEPPER=stepper_y TUNING_GOAL=silent

[gcode_macro TMC_PERFORMANCE] 
gcode:
  SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
  SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity}
  AUTOTUNE_TMC STEPPER=stepper_x TUNING_GOAL=performance
  AUTOTUNE_TMC STEPPER=stepper_y TUNING_GOAL=performance

# PAUSE
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x-5} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

# RESUME
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

# CANCEL_PRINT
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[include fan_tach_monitor.cfg]